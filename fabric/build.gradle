plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    mappings loom.layered {
        mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$mappings:intermediary-v2")
        officialMojangMappings()
    }

    // Libraries
    include(implementation("com.github.FiguraMC.luaj:luaj-core:$luaj-figura"))
    include(implementation("com.github.FiguraMC.luaj:luaj-jse:$luaj-figura"))
    include(implementation("com.neovisionaries:nv-websocket-client:$nv_websocket"))

    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    include(modImplementation(fabricApi.module("fabric-api-base", rootProject.fabric_api)))
    include(modImplementation(fabricApi.module("fabric-networking-api-v1", rootProject.fabric_api)))
    include(modImplementation(fabricApi.module("fabric-lifecycle-events-v1", rootProject.fabric_api)))

    common(project(path: ":common"))

    common(project(path: ":client")) {transitive = true}
    //shadowCommon(project(path: ":client", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    Map<String, Object> properties = new HashMap<>()

    properties.put("version", rootProject.mod_version)
    properties.put("java_version", rootProject.java_version)
    properties.put("minecraft_version", rootProject.minecraft_version)

    properties.forEach((k, v) -> inputs.property(k, v.toString()))
    filesMatching("fabric.mod.json") {
        expand properties
    }
}


shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "fabric-mc"
}

jar {
    from("LICENSE") {
        rename { String.valueOf("$archives_base_name").toUpperCase() + "_${it}"}
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourcesJar {
    def commonSources = project(":client").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}